schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
scalar Matrix
scalar Mesh
type Query {
  teams(limit: Int, search: String, offset: Int, organizationId: Int!, omitCurrentUser: Boolean): [Team!]!
  myTeams(organizationId: Int!): [CurrentUsersTeam!]!
  teamMesh(teamId: Int!, organizationId: Int!): TeamMesh!
  standouts(organizationId: Int!, teamId: Int!): [Standout!]!
  totalTeams(organizationId: Int!): Int!
  teammateProfile(organizationId: Int!, userId: Int!): TeammateProfile!
  teamPullRequests(teamId: Int!, organizationId: Int!, page: Int): [PullRequest!]!
  installationSetup(platform: Platform!, installation_id: Int!): Installation!
  userAndAffiliations: UserAndAffiliations!
  trackedRepositories(teamId: Int, organizationId: Int!): [Repository!]!
  availableRepositories(offset: Int, limit: Int, sort: RepositorySortKeys, search: String, organizationId: Int!): [Repository!]!
  overallStatsPerUser(organizationId: Int!, teamId: Int!): TeamStats!
  totalRepositories(organizationId: Int!, tracked: Boolean): Int!
  countLinesAndCommits(organizationId: Int!): ProjectCount!
}
type Team {
  id: Int!
  name: String!
  users: [User!]!
  organizationId: Int!
  projects: [TrackedRepositoryType!]!
}
type User {
  id: Int!
  name: String!
}
type TrackedRepositoryType {
  id: Int!
  repository: Repository!
}
type Repository {
  id: Int!
  name: String!
  api_url: String!
  html_url: String!
  clone_url: String!
  created_at: String!
  updated_at: String!
  platform: Platform!
  platform_id: Int!
  language: String!
  description: String!
}
type CurrentUsersTeam {
  id: Int!
  name: String!
  users: [User!]!
  organizationId: Int!
  projects: [TrackedRepositoryType!]!
  role: RoleType!
}
type RoleType {
  role: UserRole!
}
type TeamMesh {
  key: [String!]!
  mesh: Matrix!
}
type Standout {
  id: Int!
  name: String!
  lines: Int!
  increase: Int!
}
type TeammateProfile {
  id: Int!
  name: String!
  lines: Int!
  commits: Int!
  pullRequests: [PullRequest!]!
  linesPerMonth: [Int!]!
  collaborators: [TeammateCollaborator!]!
}
type PullRequest {
  id: Int!
  date: String!
  author: String!
  description: String!
  project: String!
}
type TeammateCollaborator {
  id: Int!
  name: String!
  lines: Int!
  commits: Int!
  pullRequests: Int!
  linesPerMonth: [Int!]!
  totalLines: Int!
}
type Installation {
  id: Int!
  installation_id: Int!
  platform: Platform!
  organizationId: Int
  type: InstallationType!
}
type UserAndAffiliations {
  id: Int!
  name: String!
  organizations: [OrgAffiliationType!]!
  github: GithubUserAuthorizationType
}
type OrgAffiliationType {
  id: Int!
  name: String!
  roles: [RoleType!]!
  installations: [Installation!]!
}
type GithubUserAuthorizationType {
  id: Int!
  token: String!
}
type TeamStats {
  id: Int!
  name: String!
  totalLines: Int!
  lineTrend: Int!
  totalCommits: Int!
  commitTrend: Int!
  users: [OverallStatsPerUser!]!
  projects: ProjectTrend!
}
type OverallStatsPerUser {
  id: Int!
  name: String!
  lines: Int!
  commits: Int!
  pullRequests: Int!
  linesPerMonth: [Int!]!
}
type ProjectTrend {
  trend: Int!
  trackedProjects: [TeamProject!]!
}
type TeamProject {
  id: Int!
  name: String!
}
type ProjectCount {
  lines: Int!
  commits: Int!
  totalProjects: Int!
}
type Mutation {
  logout: Boolean!
  createTeam(name: String!, organizationId: Int!): CurrentUsersTeam!
  verifySession: Boolean!
  verifyAnonymous: Boolean!
  loginWithGithub(code: String!): User!
  trackRepository(teamId: Int!, repositoryId: Int!, organizationId: Int!): Repository!
  createGithubAccount(code: String!, installation_id: Int!, name: String!): Boolean!
  setRepositoryStats(lines: Int!, range: Schedule, commits: Int!, userStats: [UserContributionsInput!]!, repositoryId: Int!, organizationId: Int!, mesh: Mesh!, pullRequests: [PullRequestEntry!]!): Boolean!
  addNewUserToTeam(name: String!, email: String!, role: UserRole!, teamId: Int!, organizationId: Int!): TeamStats!
  setOrganizationRepositories(repositories: [InputRepository!]!, organizationId: Int!): Boolean!
}
type Subscription {
  installationSetupStream(platform: Platform!, installation_id: Int!): Installation!
  availableRepositoriesStream(offset: Int, limit: Int, sort: RepositorySortKeys, search: String, organizationId: Int!): [Repository!]!
}
enum Platform {
  github
  bitbucket
}
enum UserRole {
  admin
  manager
  viewer
}
enum InstallationType {
  organization
  individual
}
enum RepositorySortKeys {
  name
  created_at
  updated_at
  language
}
enum Schedule {
  once
  daily
  weekly
  monthly
  yearly
}
input UserContributionsInput {
  email: String!
  lines: Int!
  commits: Int!
}
input PullRequestEntry {
  author: String!
  date: String!
  description: String!
}
input InputRepository {
  name: String!
  api_url: String!
  html_url: String!
  clone_url: String!
  created_at: String!
  updated_at: String!
  platform: Platform!
  platform_id: Int!
  organizationId: Int!
  language: String
  description: String
}
"Exposes a URL that specifies the behavior of this scalar."
directive @specifiedBy(
    "The URL that specifies the behavior of this scalar."
    url: String!
  ) on SCALAR
