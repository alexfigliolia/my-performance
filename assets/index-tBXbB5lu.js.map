{"version":3,"file":"index-tBXbB5lu.js","sources":["../../src/Pages/SignUp/index.tsx"],"sourcesContent":["import type { ChangeEvent, FormEvent } from \"react\";\nimport React, { Component } from \"react\";\nimport { LoginInput } from \"Components/LoginInput\";\nimport { BasicLoader } from \"Components/BasicLoader\";\nimport { connectScreen } from \"State/Screen\";\nimport type { IScreen } from \"Models/types\";\nimport \"./styles.scss\";\n\nclass SignUp extends Component<Props, State> {\n  public state: State = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    loading: false,\n  };\n\n  private onChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    if (name in this.state) {\n      // @ts-ignore\n      this.setState({ [name]: value });\n    }\n  };\n\n  private onSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    this.setState({ loading: true });\n  };\n\n  public override render() {\n    const { height } = this.props;\n    const { name, email, password, loading } = this.state;\n    return (\n      <main className=\"sign-up\" style={{ height }}>\n        <div>\n          <h1>\n            <span>my</span>Performance\n          </h1>\n          <form autoComplete=\"off\" onSubmit={this.onSubmit} action=\"\">\n            <LoginInput\n              autofocus\n              name=\"name\"\n              type=\"string\"\n              value={name}\n              onChange={this.onChange}\n            />\n            <LoginInput\n              name=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={this.onChange}\n            />\n            <LoginInput\n              name=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={this.onChange}\n            />\n            <button\n              className={`submitter ${loading ? \"loading\" : \"\"}`}\n              type=\"submit\">\n              Login\n              <BasicLoader />\n            </button>\n          </form>\n        </div>\n      </main>\n    );\n  }\n}\n\ninterface State {\n  name: string;\n  email: string;\n  password: string;\n  loading: boolean;\n}\n\ninterface Props {\n  height: number;\n}\n\nconst mSTP = ({ height }: IScreen) => {\n  return { height };\n};\n\nexport default connectScreen(mSTP)(SignUp);\n"],"names":["SignUp","Component","constructor","super","arguments","__publicField","this","name","email","password","loading","event","value","target","state","setState","e","preventDefault","render","height","props","jsxRuntimeExports","jsx","className","style","children","jsxs","autoComplete","onSubmit","action","LoginInput","autofocus","type","onChange","BasicLoader","index","connectScreen"],"mappings":"qQAQA,MAAMA,UAAeC,EAAAA,UAArB,WAAAC,GAAAC,SAAAC,WACwBC,EAAAC,KAAA,QAAA,CACpBC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,SAAS,IAGHL,EAAAC,KAAA,YAAYK,IAClB,MAAMJ,KAAEA,EAAAK,MAAMA,GAAUD,EAAME,OAC1BN,KAAQD,KAAKQ,OAEfR,KAAKS,SAAS,CAAER,CAACA,GAAOK,GAC1B,IAGMP,EAAAC,KAAA,YAAYU,IAClBA,EAAEC,iBACFX,KAAKS,SAAS,CAAEL,SAAS,GAAM,GAAA,CAGjB,MAAAQ,GACR,MAAAC,OAAEA,GAAWb,KAAKc,OAClBb,KAAEA,EAAMC,MAAAA,EAAAC,SAAOA,EAAUC,QAAAA,GAAYJ,KAAKQ,MAE9C,OAAAO,EAAAC,IAAC,QAAKC,UAAU,UAAUC,MAAO,CAAEL,UACjCM,SAAAC,EAAAA,KAAC,MACC,CAAAD,SAAA,QAAC,KACC,CAAAA,SAAA,GAAAH,IAAC,QAAKG,SAAE,OAAO,iBAEjBC,EAAAA,KAAC,QAAKC,aAAa,MAAMC,SAAUtB,KAAKsB,SAAUC,OAAO,GACvDJ,SAAA,CAAAJ,EAAAC,IAACQ,EAAA,CACCC,WAAS,EACTxB,KAAK,OACLyB,KAAK,SACLpB,MAAOL,EACP0B,SAAU3B,KAAK2B,WAEjBZ,EAAAC,IAACQ,EAAA,CACCvB,KAAK,QACLyB,KAAK,QACLpB,MAAOJ,EACPyB,SAAU3B,KAAK2B,WAEjBZ,EAAAC,IAACQ,EAAA,CACCvB,KAAK,WACLyB,KAAK,WACLpB,MAAOH,EACPwB,SAAU3B,KAAK2B,WAEjBZ,EAAAK,KAAC,SAAA,CACCH,UAAW,cAAab,EAAU,UAAY,IAC9CsB,KAAK,SAASP,SAAA,CAAA,cAEbS,EAAY,cAMzB,EAcF,MAIAC,EAAeC,GAJF,EAAGjB,aACP,CAAEA,YAGIiB,CAAoBpC"}